{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Fig.let\
\
The Fig.let portion gave me a very hard time in terms of trying to make PIL and Tkinter compatible. It took a lot of research and correcting tiny bugs before I finally got it to work well. I used TkImage.PhotoImage in order to create photo images that tkinter could use while still preserving the PIL image for filtering. In this way, tkinter acted as a display and did none of the actual modifying of the pixels (PIL did this). After getting Tk and PIL to work simultaneously, it took a while to get the image coordinates right. Because I had buttons at the top of the canvas, this resulted in there being two 0-50 pixels. So I decided to shift the image down so that it would start at 51, thus whenever I clicked the buttons (which registered as some x, 0-50) it would not think that I was trying to click the image. This worked well, (though it took a while for me to discover that this was the issue). Also, it took a while to understand different tkinter widgets including (top-level, message boxes, etc.).}