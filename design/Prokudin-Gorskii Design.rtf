{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Prokudin-Gorskii:\
\
Align:\
\
The main issue is trying to align the different plates of the negative with each other. \
\
Solution:\
\
First, I went about finding some way to find a measurable difference between the images. I settled on finding the difference between each pixel and then squaring that difference (this way it wouldn't matter which pixel was larger, hence eliminating sign issues). I also decided to only consider the middle pixels and not the border which I set at 10% of the width (arbitrarily, this can be changed if necessary). Then to find the smallest difference, I moved the one image on top of another to find which move had the smallest difference. However, because there would be impractical and slow to move the image the whole width and height of the other image, I arbitrarily set the amount of pixels moved to n where n is 3 unless otherwise specified. This way the image is moved n*2 times (-n to n).  After this came the task of trying to speed up the process, which I tried to do using pyramid. By first aligning smaller images, then using those coordinates of the smaller images to align the big images. It saved a lot of time from having to check large transforms between large images. And since finding the difference of a small image would be faster (less pixels), it did reduce time.\
}